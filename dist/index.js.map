{"version":3,"file":"index.js","sources":["../lib/hooks/useResizeObserver.js","../lib/hooks/useElementBounds.js","../lib/hooks/useOuterClick.js","../lib/hooks/useDropdownPosition.js","../lib/utils.js","../lib/hooks/useInput.js","../lib/hooks/useDropdown.js","../lib/components/container.js","../lib/components/option.js","../lib/components/noResults.js","../lib/components/dropdown.js","../lib/components/input.js","../lib/components/clear.js","../lib/components/autocomplete/content.js","../lib/components/autocomplete/threshold.js","../lib/components/autocomplete/loading.js","../lib/components/multiselect/selectedItem.js","../lib/components/multiselect/content.js","../lib/components/autocomplete/index.js","../lib/components/multiselect/index.js"],"sourcesContent":["import { useRef, useEffect } from 'react';\r\n\r\nconst useResizeObserver = (callback, element) => {\r\n    const observer = useRef(null);\r\n\r\n    useEffect(() => {\r\n        const current = element && element.current;\r\n\r\n        if (observer && observer.current && current) {\r\n            observer.current.unobserve(current);\r\n        }\r\n\r\n        observer.current = new ResizeObserver(callback);\r\n        if (current) {\r\n            observer.current.observe(current);\r\n        }\r\n\r\n        return () => {\r\n            if (observer && observer.current && current) {\r\n                observer.current.unobserve(current);\r\n            }\r\n        }\r\n    }, [callback, element])\r\n}\r\n\r\nexport default useResizeObserver;","import { useCallback, useEffect, useState } from \"react\";\r\nimport useResizeObserver from './useResizeObserver';\r\n\r\nconst useElementBounds = (elementRef) => {\r\n    const [elementBounds, setElementBounds] = useState();\r\n\r\n    const updateElementBounds = useCallback(() => {\r\n        if (elementRef && elementRef.current) {\r\n            setElementBounds(elementRef.current.getBoundingClientRect());\r\n        }\r\n    }, [elementRef]);\r\n\r\n    useResizeObserver(updateElementBounds, elementRef);\r\n\r\n    useEffect((() => {\r\n        updateElementBounds();\r\n        window.addEventListener('resize', updateElementBounds);\r\n        window.addEventListener('scroll', updateElementBounds);\r\n\r\n        return () => {\r\n            window.removeEventListener('resize', updateElementBounds);\r\n            window.removeEventListener('scroll', updateElementBounds);\r\n        }\r\n    }), [updateElementBounds])\r\n\r\n    return elementBounds;\r\n}\r\n\r\nexport default useElementBounds;\r\n\r\n","// Позаимствовано из: https://stackoverflow.com/a/54292872/13467303\r\n\r\nimport { useEffect, useRef } from \"react\";\r\n\r\nconst useOuterClick = (callback) => {\r\n    const callbackRef = useRef(); // initialize mutable callback ref\r\n    const innerRef = useRef(); // returned to client, who sets the \"border\" element\r\n\r\n    // update callback on each render, so second useEffect has most recent callback\r\n    useEffect(() => { callbackRef.current = callback; });\r\n    useEffect(() => {\r\n        document.addEventListener(\"click\", handleClick);\r\n        return () => document.removeEventListener(\"click\", handleClick);\r\n\r\n        function handleClick(e) {\r\n            if (innerRef.current && callbackRef.current &&\r\n                !innerRef.current.contains(e.target)\r\n            ) {\r\n                callbackRef.current(e);\r\n            }\r\n        }\r\n    }, []);\r\n\r\n    return innerRef;\r\n}\r\n\r\nexport default useOuterClick;","import { useEffect, useState } from \"react\";\r\n\r\nimport { getDropdownPosition } from \"../utils\";\r\n\r\nconst useDropdownPosition = (parentBounds, dropdownMaxHeight) => {\r\n    const [dropdownPosition, setDropdownPosition] = useState();\r\n\r\n    useEffect(() => {\r\n        // при изменении позиции родительского элемента, определяем направление появления выпадающего списка\r\n        parentBounds && setDropdownPosition(getDropdownPosition(parentBounds, dropdownMaxHeight));\r\n    }, [parentBounds, dropdownMaxHeight])\r\n\r\n    return dropdownPosition;\r\n}\r\n\r\nexport default useDropdownPosition;","const getDropdownPosition = (parentBounds, dropdownMaxHeight) => {\r\n    const dropdownBottom = parentBounds.bottom + dropdownMaxHeight;\r\n    return window.innerHeight > dropdownBottom\r\n        ? 'bottom'\r\n        : 'top';\r\n}\r\n\r\nconst filterOptions = (options, search, getOptionValue = (item) => item) => {\r\n    const regExpSafeSearch = search.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\r\n    const reg = new RegExp(regExpSafeSearch, 'i');\r\n    return options.filter(item => reg.test(getOptionValue(item)));\r\n}\r\n\r\nexport { getDropdownPosition, filterOptions };","import { useCallback, useRef } from \"react\";\r\n\r\nconst useInput = () => {\r\n    const inputRef = useRef(null);\r\n\r\n    const focus = useCallback(() => {\r\n        if (inputRef && inputRef.current) {\r\n            inputRef.current.focus();\r\n        }\r\n    }, [])\r\n\r\n    const blur = useCallback(() => {\r\n        if (inputRef && inputRef.current) {\r\n            inputRef.current.blur();\r\n        }\r\n    }, [])\r\n\r\n    return { inputRef, focus, blur };\r\n}\r\n\r\nexport default useInput;","import { useCallback, useEffect, useState } from \"react\";\r\n\r\nconst useDropdown = ({ options, value, onOptionSelect, onEscape, search }) => {\r\n    // State\r\n\r\n    const [isDropdownOpen, setIsDropdownOpen] = useState(false);\r\n    const [pointer, setPointer] = useState(null);\r\n\r\n\r\n    // Functions\r\n\r\n    const openDropdown = useCallback(() => {\r\n        if (pointer === null && options.length) {\r\n            setPointer(0);\r\n        }\r\n        setIsDropdownOpen(true);\r\n    }, [pointer, options]);\r\n\r\n    const closeDropdown = useCallback(() => {\r\n        setIsDropdownOpen(false);\r\n        setPointer(null);\r\n    }, []);\r\n\r\n    const escapeFromDropdown = useCallback(() => {\r\n        closeDropdown();\r\n        onEscape();\r\n    }, [closeDropdown, onEscape]);\r\n\r\n    const handleKeyDown = useCallback((event) => {\r\n        switch (event.key) {\r\n            case 'ArrowUp':\r\n                if (!isDropdownOpen) {\r\n                    setPointer(options.length - 1);\r\n                    openDropdown();\r\n                } else {\r\n                    if (!options.length) return;\r\n                    if (pointer - 1 < 0) {\r\n                        setPointer(options.length - 1);\r\n                    } else {\r\n                        setPointer(pointer - 1);\r\n                    }\r\n                }\r\n                break;\r\n            case 'ArrowDown':\r\n                if (!isDropdownOpen) {\r\n                    setPointer(0);\r\n                    openDropdown();\r\n                } else {\r\n                    if (!options.length) return;\r\n                    if (pointer + 1 >= options.length) {\r\n                        setPointer(0);\r\n                    } else {\r\n                        setPointer(pointer + 1);\r\n                    }\r\n                }\r\n                break;\r\n            case 'Enter':\r\n                if (pointer === null) return;\r\n\r\n                const option = options[pointer];\r\n                onOptionSelect(option);\r\n                break;\r\n            case 'Escape':\r\n                escapeFromDropdown();\r\n                break;\r\n            case 'Tab':\r\n                escapeFromDropdown();\r\n                break;\r\n            default:\r\n                if (!isDropdownOpen) {\r\n                    openDropdown();\r\n                }\r\n                break;\r\n        }\r\n    }, [isDropdownOpen, openDropdown, escapeFromDropdown, onOptionSelect, pointer, options]);\r\n\r\n    const toggle = useCallback(() => {\r\n        if (isDropdownOpen && search.length) return;\r\n\r\n        if (isDropdownOpen) {\r\n            closeDropdown()\r\n        } else {\r\n            openDropdown()\r\n        }\r\n    }, [closeDropdown, isDropdownOpen, openDropdown, search]);\r\n\r\n\r\n    // Effects\r\n\r\n    useEffect(() => {\r\n        setPointer(options.length ? 0 : null);\r\n    }, [options]);\r\n\r\n    useEffect(() => {\r\n        closeDropdown();\r\n    }, [value, closeDropdown]);\r\n\r\n\r\n    return {\r\n        dropdown: {\r\n            isOpen: isDropdownOpen,\r\n            open: openDropdown,\r\n            close: closeDropdown,\r\n            toggle,\r\n            escape: escapeFromDropdown,\r\n        },\r\n        pointer: {\r\n            position: pointer,\r\n            setPosition: setPointer\r\n        },\r\n        handleKeyDown\r\n    }\r\n}\r\n\r\nexport default useDropdown;","//import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Container = styled.div`\r\nposition: relative;\r\nmin-height: calc(1.5em + .75rem + 2px) !important;\r\nwidth: 100%;\r\nmargin: 0;\r\npadding-left: .375rem;\r\npadding-right: .375rem;\r\npadding-bottom: .375rem;\r\nbox-sizing: border-box;\r\ndisplay: flex;\r\nbackground-color: #fff;\r\nborder: 1px solid #ced4da;\r\nborder-radius: .25rem;\r\ncursor: pointer;\r\n${({ dropdownPosition, isDropdownOpen }) =>\r\n        isDropdownOpen &&\r\n        `border-${dropdownPosition}-right-radius: 0;\r\n         border-${dropdownPosition}-left-radius: 0;\r\n         border-${dropdownPosition}-color: #fff;`\r\n    }\r\n${({ disabled }) => disabled\r\n        ? `pointer-events: none;\r\n           background-color: #e9ecef;`\r\n        : ''\r\n    }\r\n\r\n&:focus-within {\r\n    box-shadow: 0 0 0 0.2rem rgb(38 143 255 / 50%);\r\n}\r\n`;\r\n\r\nexport default Container;","import React, { useEffect, useRef } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst OptionView = styled.span`\r\npadding: .375rem .75rem;\r\ndisplay: block;\r\nwhite-space: nowrap;\r\ncursor: pointer;\r\n\r\n${({ isPointerOver, isSelected }) => {\r\n        if (isPointerOver) {\r\n            return `\r\n            color: #fff;\r\n            background-color: #007bff;`\r\n        }\r\n\r\n        if (isSelected) {\r\n            return `\r\n            color: #212529;\r\n            background-color: #f2f2f2;`\r\n        }\r\n    }}\r\n`;\r\n\r\n\r\nconst Option = ({ isPointerOver, isSelected, children, ...props }) => {\r\n    const optionRef = useRef();\r\n\r\n    useEffect(() => {\r\n        if (isPointerOver && optionRef.current) {\r\n            optionRef.current.scrollIntoView({\r\n                behavior: 'smooth',\r\n                block: 'nearest',\r\n                inline: 'start'\r\n            });\r\n        }\r\n    }, [isPointerOver])\r\n\r\n    return (\r\n        <OptionView\r\n            ref={optionRef}\r\n            role='option'\r\n            aria-selected={isSelected}\r\n            title={typeof children === 'string' ? children : null}\r\n            isPointerOver={isPointerOver}\r\n            isSelected={isSelected}\r\n            {...props}\r\n        >\r\n            {children}\r\n        </OptionView>\r\n    );\r\n}\r\n\r\nexport default Option;\r\nexport { OptionView };","import React from 'react';\r\nimport { OptionView } from './option';\r\nimport styled from 'styled-components';\r\n\r\nconst NoResultsView = styled(OptionView)`\r\ncursor: default;\r\n`;\r\n\r\nconst NoResults = () => {\r\n    return (\r\n        <NoResultsView>\r\n            Совпадений не найдено\r\n        </NoResultsView>\r\n    );\r\n}\r\n\r\nexport default NoResults;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Option from './option';\r\nimport NoResults from './noResults';\r\n\r\n\r\nconst DropdownView = styled.div`\r\nposition: absolute;\r\nleft: -1px;\r\npadding: 0px;\r\nmax-height: ${({ maxHeight }) => maxHeight}px;\r\nwidth: ${({ parentBounds }) => parentBounds.width}px;\r\ndisplay: flex;\r\nflex-direction: column;\r\noverflow-x: hidden;\r\nborder-radius: 0;\r\nbackground-color: white;\r\nborder: 1px solid #ced4da;\r\nbox-sizing: border-box;\r\nz-index: 19;\r\n${({ parentBounds, dropdownPosition }) =>\r\n        dropdownPosition === 'top'\r\n            ? `bottom: ${parentBounds.height}px;\r\n               border-bottom: none;\r\n               border-top-right-radius: .25rem;\r\n               border-top-left-radius: .25rem;`\r\n            : `top: ${parentBounds.height - 1}px;\r\n               border-top: none;\r\n               border-bottom-right-radius: .25rem;\r\n               border-bottom-left-radius: .25rem;`\r\n    }\r\n`;\r\n\r\n\r\nconst Dropdown = ({\r\n    options = [],\r\n    content,\r\n    getOptionKey = (option) => option,\r\n    renderOptionText = (option) => option,\r\n    onSelectOption,\r\n    selectedItems,\r\n    pointer,\r\n    onUpdatePointer,\r\n    parentBounds,\r\n    maxHeight = 350,\r\n    position\r\n}) => {\r\n    return (\r\n        <DropdownView\r\n            dropdownPosition={position}\r\n            maxHeight={maxHeight}\r\n            parentBounds={parentBounds}\r\n        >\r\n            {\r\n                content\r\n                    ? content\r\n                    :\r\n                    options.length\r\n                        ? options.map((option, index) => {\r\n                            const key = getOptionKey(option);\r\n                            const isPointerOver = index === pointer;\r\n                            const isSelected = !!(selectedItems && selectedItems.find(item => getOptionKey(item) === key));\r\n                            const onClick = (event) => {\r\n                                event.stopPropagation();\r\n                                onSelectOption(option);\r\n                            }\r\n\r\n                            return (\r\n                                <Option key={key}\r\n                                    isPointerOver={isPointerOver}\r\n                                    isSelected={isSelected}\r\n                                    onMouseEnter={() => onUpdatePointer(index)}\r\n                                    onClick={onClick}\r\n                                >\r\n                                    {renderOptionText(option)}\r\n                                </Option>\r\n                            )\r\n                        })\r\n                        : <NoResults />\r\n            }\r\n        </DropdownView>\r\n    );\r\n}\r\n\r\nexport default Dropdown;","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst InputView = styled.input`\r\nflex-grow: 1;\r\nmargin-top: calc(.375rem - 2px);\r\npadding: 0;\r\nbox-sizing: border-box;\r\nborder: none;\r\nfont-family: inherit;\r\nfont-size: inherit;\r\nbackground-color: inherit;\r\nline-height: inherit;\r\ncolor: #495057;\r\n\r\n&:focus {\r\n    outline: 0;\r\n}\r\n`;\r\n\r\nconst Input = ({ inputRef, placeholder, value, onSearchChange, disabled }) => {\r\n    const onChange = (event) => onSearchChange(event.target.value);\r\n\r\n    return (\r\n        <InputView\r\n            ref={inputRef}\r\n            placeholder={placeholder}\r\n            value={value}\r\n            onChange={onChange}\r\n            disabled={disabled}\r\n        />\r\n    );\r\n}\r\n\r\nexport default Input;","import React from 'react';\r\nimport styled from \"styled-components\";\r\n\r\nconst ClearView = styled.span`\r\npadding-right: 3px;\r\npadding-left: 3px;\r\nfont-weight: 700;\r\nfont-size: 1.25rem;\r\ncolor: #bdc6d0;\r\nalign-self: center;\r\n\r\n&:hover {\r\n    color: #343a40;\r\n}\r\n`;\r\n\r\nconst Clear = ({ onClick }) => {\r\n    return (\r\n        <ClearView onClick={onClick} title=\"Очистить\">\r\n            &times;\r\n        </ClearView>\r\n    );\r\n}\r\n\r\nexport default Clear;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Clear from '../clear';\r\n\r\nconst AutoCompleteContentView = styled.div`\r\ndisplay: flex;\r\nflex: 1;\r\nalign-items: flex-end;\r\n`\r\n\r\nconst ValueView = styled.span`\r\nflex: 1;\r\ncolor: #495057;\r\n`\r\n\r\nconst Content = ({ value, renderValueText, input, onClear }) => {\r\n    return (\r\n        <AutoCompleteContentView>\r\n            {\r\n                value\r\n                    ? <>\r\n                        <ValueView>\r\n                            {renderValueText(value)}\r\n                        </ValueView>\r\n                        <Clear onClick={onClear} />\r\n                    </>\r\n                    : input\r\n            }\r\n        </AutoCompleteContentView>\r\n    );\r\n}\r\n\r\nexport default Content;","import React from 'react';\r\nimport { OptionView } from '../option';\r\nimport styled from 'styled-components';\r\n\r\nconst ThresholdView = styled(OptionView)`\r\ncursor: default;\r\n`;\r\n\r\nconst Threshold = () => {\r\n    return (\r\n        <ThresholdView>\r\n            Продолжайте ввод, чтобы начался поиск\r\n        </ThresholdView>\r\n    );\r\n}\r\n\r\nexport default Threshold;","import React from 'react';\r\nimport { OptionView } from '../option';\r\nimport styled from 'styled-components';\r\n\r\nconst LoadingView = styled(OptionView)`\r\ncursor: default;\r\ntext-align: center;\r\n`;\r\n\r\nconst Spinner = styled.span`\r\n@keyframes spinner-border {\r\n  to { transform: rotate(360deg); }\r\n}\r\ndisplay: inline-block;\r\nwidth: 1rem;\r\nheight: 1rem;\r\nvertical-align: text-bottom;\r\nborder: .25em solid currentColor;\r\nborder-right-color: transparent;\r\nborder-radius: 50%;\r\nborder-width: .2em;\r\nanimation: spinner-border .75s linear infinite;\r\ncolor: #6c757d!important;\r\n`;\r\n\r\nconst Loading = () => {\r\n    return (\r\n        <LoadingView>\r\n            <Spinner />\r\n        </LoadingView>\r\n    );\r\n}\r\n\r\nexport default Loading;","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst SelectedItemView = styled.div`\r\ndisplay: flex;\r\nalign-items: center;\r\npadding: 0;\r\npadding-right: .75rem;\r\nmargin-top: calc(.375rem - 2px);\r\nmargin-right: .375rem;\r\ncolor: #495057;\r\nfont-size: 1rem;\r\ncursor: pointer;\r\nborder: 1px solid #bdc6d0;\r\nborder-radius: .2rem;\r\n`;\r\n\r\nconst RemoveItem = styled.span`\r\npadding-right: 3px;\r\npadding-left: 3px;\r\nmargin-right: 1px;\r\nmargin-left: 3px;\r\nfont-weight: 700;\r\ncolor: #bdc6d0;\r\n\r\n&:hover {\r\n    color: #343a40;\r\n}\r\n`;\r\n\r\nconst SelectedItem = ({ onItemRemove, children }) => {\r\n    const onClick = (event) => {\r\n        event.stopPropagation();\r\n        onItemRemove();\r\n    }\r\n\r\n    return (\r\n        <SelectedItemView>\r\n            <RemoveItem onClick={onClick}>\r\n                &times;\r\n            </RemoveItem>\r\n            {children}\r\n        </SelectedItemView>\r\n    );\r\n}\r\n\r\nexport default SelectedItem;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport SelectedItem from './selectedItem';\r\n\r\nconst MultiselectContentView = styled.div`\r\ndisplay: flex;\r\nflex-wrap: wrap;\r\nflex: 1;\r\n`;\r\n\r\nconst MultiselectContent = ({ selected, getOptionKey, renderValueText, onItemRemove, input }) => {\r\n    return (\r\n        <MultiselectContentView>\r\n            {\r\n                selected.map((option) => {\r\n                    const handleRemoveItem = () => onItemRemove(option);\r\n\r\n                    return (\r\n                        <SelectedItem key={getOptionKey(option)} onItemRemove={handleRemoveItem}>\r\n                            {renderValueText(option)}\r\n                        </SelectedItem>\r\n                    )\r\n                })\r\n            }\r\n            {input}\r\n        </MultiselectContentView>\r\n    );\r\n}\r\n\r\nexport default MultiselectContent;","import React, { useState, useCallback } from 'react';\r\n\r\nimport useElementBounds from '../../hooks/useElementBounds';\r\nimport useOuterClick from '../../hooks/useOuterClick';\r\nimport useDropdownPosition from '../../hooks/useDropdownPosition'\r\nimport useInput from '../../hooks/useInput';\r\nimport useDropdown from '../../hooks/useDropdown';\r\nimport Container from '../container';\r\nimport Dropdown from '../dropdown';\r\nimport Input from '../input';\r\nimport Content from './content';\r\nimport Threshold from './threshold';\r\nimport Loading from './loading';\r\n\r\n\r\nconst Autocomplete = ({\r\n    options = [],\r\n    value = null,\r\n    onChange = () => undefined,\r\n    onSearchChange = () => undefined,\r\n    threshold = 3,\r\n    isLoading = false,\r\n    getOptionKey = (option) => option.id ?? option,\r\n    renderOptionText = (option) => option,\r\n    renderValueText = (option) => renderOptionText(option),\r\n    dropdownHeight = 300,\r\n    placeholder = 'Начните ввод для поиска',\r\n    disabled = false,\r\n    ...props\r\n}) => {\r\n    const [search, setSearch] = useState('');\r\n    const { inputRef, focus, blur } = useInput();\r\n\r\n    const thresholdContent = search.length <= threshold ? <Threshold /> : null;\r\n    const loadingContent = isLoading ? <Loading /> : null;\r\n\r\n    const updateSearch = useCallback((value) => {\r\n        // не следует повторять поиск, если:\r\n        const shouldNotSearchRequested =\r\n            // запрос короче порогового значения\r\n            value.length <= threshold\r\n            // либо, если запрос продолжает предыдущий запрос, завершившийся неудачно\r\n            || (value.length > threshold + 1\r\n                && !isLoading\r\n                && options.length === 0\r\n                && value.startsWith(search));\r\n\r\n        setSearch(value);\r\n\r\n        if (shouldNotSearchRequested) return;\r\n        onSearchChange(value);\r\n    }, [onSearchChange, isLoading, options, threshold, search]);\r\n\r\n    const handleChange = useCallback((value) => {\r\n        onChange(value);\r\n        updateSearch('');\r\n    }, [onChange, updateSearch]);\r\n\r\n    const { dropdown, pointer, handleKeyDown } = useDropdown({\r\n        onEscape: () => {\r\n            blur();\r\n            updateSearch('');\r\n        },\r\n        onOptionSelect: handleChange,\r\n        options: options,\r\n        search,\r\n        value\r\n    });\r\n\r\n    const onOuterClick = useCallback(() => {\r\n        dropdown.escape();\r\n    }, [dropdown]);\r\n\r\n    const onClick = useCallback(() => {\r\n        if (options.length && search.length > threshold) {\r\n            dropdown.toggle();\r\n        }\r\n        focus();\r\n    }, [focus, dropdown, options, search, threshold]);\r\n\r\n    const handleClear = useCallback(() => {\r\n        handleChange(null);\r\n    }, [handleChange]);\r\n\r\n\r\n    const innerRef = useOuterClick(onOuterClick);\r\n    const controlBounds = useElementBounds(innerRef);\r\n    const dropdownPosition = useDropdownPosition(controlBounds, dropdownHeight);\r\n\r\n\r\n    const SearchInput = <Input\r\n        inputRef={inputRef}\r\n        placeholder={value ? null : placeholder}\r\n        value={search}\r\n        onSearchChange={updateSearch}\r\n        disabled={disabled}\r\n    />\r\n\r\n    return (\r\n        <Container\r\n            ref={innerRef}\r\n            dropdownPosition={dropdownPosition}\r\n            isDropdownOpen={dropdown.isOpen}\r\n            onKeyDown={handleKeyDown}\r\n            onClick={onClick}\r\n            disabled={disabled}\r\n            {...props}\r\n        >\r\n            <Content\r\n                value={value}\r\n                renderValueText={renderValueText}\r\n                input={SearchInput}\r\n                onClear={handleClear}\r\n            />\r\n            {\r\n                dropdown.isOpen && !disabled\r\n                    ? <Dropdown\r\n                        content={thresholdContent || loadingContent || null}\r\n                        options={options}\r\n                        getOptionKey={getOptionKey}\r\n                        renderOptionText={renderOptionText}\r\n                        onSelectOption={handleChange}\r\n                        pointer={pointer.position}\r\n                        onUpdatePointer={pointer.setPosition}\r\n                        parentBounds={controlBounds}\r\n                        maxHeight={300}\r\n                        position={dropdownPosition}\r\n                    />\r\n                    : null\r\n            }\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Autocomplete;","import React, { useState, useCallback } from 'react';\r\n\r\nimport useElementBounds from '../../hooks/useElementBounds';\r\nimport useOuterClick from '../../hooks/useOuterClick';\r\nimport useDropdownPosition from '../../hooks/useDropdownPosition'\r\nimport useInput from '../../hooks/useInput';\r\nimport useDropdown from '../../hooks/useDropdown';\r\nimport Container from '../container';\r\nimport Content from './content';\r\nimport Dropdown from '../dropdown';\r\nimport Input from '../input';\r\nimport { filterOptions } from '../../utils';\r\n\r\n\r\nconst Multiselect = ({\r\n    options = [],\r\n    value = [], // состояние выбранных элементов должно управляться родительским компонентом\r\n    onChange = () => undefined,\r\n    getOptionKey = (option) => option.id ?? option,\r\n    renderOptionText = (option) => option,\r\n    renderValueText = (option) => renderOptionText(option),\r\n    dropdownHeight = 300,\r\n    placeholder = 'Начните ввод для поиска',\r\n    disabled = false,\r\n    getSearchValue = (option) => renderOptionText(option),\r\n    ...props\r\n}) => {\r\n    const [search, setSearch] = useState('');\r\n    const [searchResults, setSearchResults] = useState(options);\r\n\r\n    const { inputRef, focus, blur } = useInput();\r\n\r\n    const updateSearch = useCallback((value) => {\r\n        setSearch(value);\r\n        const newSearchResults = value === ''\r\n            ? options\r\n            : filterOptions(options, value, getSearchValue);\r\n        setSearchResults(newSearchResults);\r\n    }, [options, getSearchValue])\r\n\r\n    const handleChange = useCallback((newValue) => {\r\n        onChange(newValue);\r\n        updateSearch('');\r\n        focus();\r\n    }, [focus, onChange, updateSearch])\r\n\r\n    const handleOptionSelect = useCallback((option) => {\r\n        const selectedOptionIndex = value.findIndex(item => getOptionKey(item) === getOptionKey(option))\r\n        let newValue;\r\n\r\n        if (selectedOptionIndex !== -1) {\r\n            // если выбираемая опция уже была выбрана ранее, исключаем ее из выбора\r\n            newValue = [\r\n                ...value.slice(0, selectedOptionIndex),\r\n                ...value.slice(selectedOptionIndex + 1)\r\n            ]\r\n        } else {\r\n            newValue = [...value, option];\r\n        }\r\n        handleChange(newValue);\r\n    }, [value, getOptionKey, handleChange])\r\n\r\n    const handleItemSelectionRemove = useCallback((item) => {\r\n        const newValue = value.filter(selected => getOptionKey(selected) !== getOptionKey(item));\r\n        handleChange(newValue);\r\n    }, [value, getOptionKey, handleChange])\r\n\r\n    const { dropdown, pointer, handleKeyDown } = useDropdown({\r\n        onEscape: () => {\r\n            blur();\r\n            updateSearch('');\r\n        },\r\n        onOptionSelect: handleOptionSelect,\r\n        options: searchResults,\r\n        search,\r\n        value\r\n    });\r\n\r\n    const onOuterClick = useCallback(() => {\r\n        dropdown.escape();\r\n    }, [dropdown])\r\n\r\n    const onClick = useCallback(() => {\r\n        dropdown.toggle();\r\n        focus();\r\n    }, [dropdown, focus])\r\n\r\n\r\n    const innerRef = useOuterClick(onOuterClick);\r\n    const selectBounds = useElementBounds(innerRef);\r\n    const dropdownPosition = useDropdownPosition(selectBounds, dropdownHeight);\r\n\r\n\r\n    const SearchInput = <Input\r\n        inputRef={inputRef}\r\n        placeholder={value.length ? null : placeholder}\r\n        value={search}\r\n        onSearchChange={updateSearch}\r\n        disabled={disabled}\r\n    />\r\n\r\n    return (\r\n        <Container\r\n            ref={innerRef}\r\n            dropdownPosition={dropdownPosition}\r\n            isDropdownOpen={dropdown.isOpen}\r\n            onKeyDown={handleKeyDown}\r\n            onClick={onClick}\r\n            disabled={disabled}\r\n            {...props}\r\n        >\r\n            <Content\r\n                selected={value}\r\n                getOptionKey={getOptionKey}\r\n                renderValueText={renderValueText}\r\n                onItemRemove={handleItemSelectionRemove}\r\n                input={SearchInput}\r\n            />\r\n            {\r\n                dropdown.isOpen && !disabled\r\n                    ? <Dropdown\r\n                        options={searchResults}\r\n                        getOptionKey={getOptionKey}\r\n                        renderOptionText={renderOptionText}\r\n                        onSelectOption={handleOptionSelect}\r\n                        pointer={pointer.position}\r\n                        onUpdatePointer={pointer.setPosition}\r\n                        selectedItems={value}\r\n                        parentBounds={selectBounds}\r\n                        maxHeight={300}\r\n                        position={dropdownPosition}\r\n                    />\r\n                    : null\r\n            }\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Multiselect;"],"names":["useElementBounds","elementRef","callback","element","observer","useState","elementBounds","setElementBounds","updateElementBounds","useCallback","current","getBoundingClientRect","useRef","useEffect","unobserve","ResizeObserver","observe","window","addEventListener","removeEventListener","useOuterClick","callbackRef","innerRef","document","handleClick","e","contains","target","useDropdownPosition","parentBounds","dropdownMaxHeight","dropdownPosition","setDropdownPosition","dropdownBottom","bottom","innerHeight","getDropdownPosition","useInput","inputRef","focus","blur","useDropdown","options","value","onOptionSelect","onEscape","search","isDropdownOpen","setIsDropdownOpen","pointer","setPointer","openDropdown","length","closeDropdown","escapeFromDropdown","handleKeyDown","event","key","option","toggle","dropdown","isOpen","open","close","escape","position","setPosition","Container","styled","div","disabled","OptionView","span","isPointerOver","isSelected","Option","children","props","optionRef","scrollIntoView","behavior","block","inline","React","ref","role","title","NoResultsView","NoResults","DropdownView","maxHeight","width","height","Dropdown","content","getOptionKey","renderOptionText","onSelectOption","selectedItems","onUpdatePointer","map","index","find","item","onMouseEnter","onClick","stopPropagation","InputView","input","Input","placeholder","onSearchChange","onChange","ClearView","Clear","AutoCompleteContentView","ValueView","Content","renderValueText","onClear","ThresholdView","Threshold","LoadingView","Spinner","Loading","SelectedItemView","RemoveItem","SelectedItem","onItemRemove","MultiselectContentView","MultiselectContent","selected","threshold","isLoading","id","dropdownHeight","setSearch","thresholdContent","loadingContent","updateSearch","shouldNotSearchRequested","startsWith","handleChange","onOuterClick","handleClear","controlBounds","SearchInput","onKeyDown","getSearchValue","searchResults","setSearchResults","newSearchResults","getOptionValue","regExpSafeSearch","replace","reg","RegExp","filter","test","filterOptions","newValue","handleOptionSelect","selectedOptionIndex","findIndex","slice","handleItemSelectionRemove","selectBounds"],"mappings":"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"}