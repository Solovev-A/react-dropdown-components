{"version":3,"sources":["lib/hooks/useResizeObserver.js","lib/hooks/useElementBounds.js","lib/hooks/useOuterClick.js","lib/utils.js","lib/hooks/useDropdownPosition.js","lib/hooks/useInput.js","lib/hooks/useDropdown.js","lib/components/container.js","lib/components/option.js","lib/components/noResults.js","lib/components/dropdown.js","lib/components/input.js","lib/components/clear.js","lib/components/autocomplete/content.js","lib/components/autocomplete/threshold.js","lib/components/autocomplete/loading.js","lib/components/autocomplete/index.js","lib/components/multiselect/selectedItem.js","lib/components/multiselect/content.js","lib/components/multiselect/index.js","mockData.js","App.js","index.js"],"names":["useResizeObserver","callback","element","observer","useRef","useEffect","current","unobserve","ResizeObserver","observe","useElementBounds","elementRef","useState","elementBounds","setElementBounds","updateElementBounds","useCallback","getBoundingClientRect","window","addEventListener","removeEventListener","useOuterClick","callbackRef","innerRef","document","handleClick","e","contains","target","filterOptions","options","search","getOptionValue","item","regExpSafeSearch","replace","reg","RegExp","filter","test","useDropdownPosition","parentBounds","dropdownMaxHeight","dropdownPosition","setDropdownPosition","dropdownBottom","bottom","innerHeight","getDropdownPosition","useInput","inputRef","focus","blur","useDropdown","value","onOptionSelect","onCloseWithEscape","isDropdownOpen","setIsDropdownOpen","pointer","setPointer","openDropdown","length","closeDropdown","handleKeyDown","event","key","option","toggle","dropdown","isOpen","open","close","position","setPosition","Container","styled","div","disabled","OptionView","span","isPointerOver","isSelected","Option","children","props","optionRef","scrollIntoView","behavior","block","inline","ref","role","title","NoResultsView","NoResults","DropdownView","maxHeight","width","height","Dropdown","content","getOptionKey","renderOptionText","onSelectOption","selectedItems","onUpdatePointer","map","index","find","onMouseEnter","onClick","stopPropagation","InputView","input","Input","placeholder","onSearchChange","onChange","ClearView","Clear","AutoCompleteContentView","ValueView","Content","renderValueText","onClear","ThresholdView","Threshold","LoadingView","Spinner","Loading","Autocomplete","threshold","isLoading","id","dropdownHeight","setSearch","thresholdContent","loadingContent","updateSearch","onOuterClick","handleClear","controlBounds","SearchInput","onKeyDown","SelectedItemView","RemoveItem","SelectedItem","onItemRemove","MultiselectContentView","MultiselectContent","selected","Multiselect","getSearchValue","searchResults","setSearchResults","newSearchResults","handleChange","newValue","handleOptionSelect","selectedOptionIndex","findIndex","slice","handleItemSelectionRemove","selectBounds","selectedOption","name","email","App","setSelected","autocompleteOptions","setAutocompleteOptions","autocompleteValue","setAutocompleteValue","autocompleteSearch","setAutocompleteSearch","autocompleteLoading","setAutocompleteLoading","timer","setTimeout","newOptions","clearTimeout","style","margin","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.e3362f01.chunk.js","sourcesContent":["import { useRef, useEffect } from 'react';\r\n\r\nconst useResizeObserver = (callback, element) => {\r\n    const observer = useRef(null);\r\n\r\n    useEffect(() => {\r\n        const current = element && element.current;\r\n\r\n        if (observer && observer.current && current) {\r\n            observer.current.unobserve(current);\r\n        }\r\n\r\n        observer.current = new ResizeObserver(callback);\r\n        if (current) {\r\n            observer.current.observe(current);\r\n        }\r\n\r\n        return () => {\r\n            if (observer && observer.current && current) {\r\n                observer.current.unobserve(current);\r\n            }\r\n        }\r\n    }, [callback, element])\r\n}\r\n\r\nexport default useResizeObserver;","import { useCallback, useEffect, useState } from \"react\";\r\nimport useResizeObserver from './useResizeObserver';\r\n\r\nconst useElementBounds = (elementRef) => {\r\n    const [elementBounds, setElementBounds] = useState();\r\n\r\n    const updateElementBounds = useCallback(() => {\r\n        if (elementRef && elementRef.current) {\r\n            setElementBounds(elementRef.current.getBoundingClientRect());\r\n        }\r\n    }, [elementRef]);\r\n\r\n    useResizeObserver(updateElementBounds, elementRef);\r\n\r\n    useEffect((() => {\r\n        updateElementBounds();\r\n        window.addEventListener('resize', updateElementBounds);\r\n        window.addEventListener('scroll', updateElementBounds);\r\n\r\n        return () => {\r\n            window.removeEventListener('resize', updateElementBounds);\r\n            window.removeEventListener('scroll', updateElementBounds);\r\n        }\r\n    }), [updateElementBounds])\r\n\r\n    return elementBounds;\r\n}\r\n\r\nexport default useElementBounds;\r\n\r\n","// Позаимствовано из: https://stackoverflow.com/a/54292872/13467303\r\n\r\nimport { useEffect, useRef } from \"react\";\r\n\r\nconst useOuterClick = (callback) => {\r\n    const callbackRef = useRef(); // initialize mutable callback ref\r\n    const innerRef = useRef(); // returned to client, who sets the \"border\" element\r\n\r\n    // update callback on each render, so second useEffect has most recent callback\r\n    useEffect(() => { callbackRef.current = callback; });\r\n    useEffect(() => {\r\n        document.addEventListener(\"click\", handleClick);\r\n        return () => document.removeEventListener(\"click\", handleClick);\r\n\r\n        function handleClick(e) {\r\n            if (innerRef.current && callbackRef.current &&\r\n                !innerRef.current.contains(e.target)\r\n            ) {\r\n                callbackRef.current(e);\r\n            }\r\n        }\r\n    }, []);\r\n\r\n    return innerRef;\r\n}\r\n\r\nexport default useOuterClick;","const getDropdownPosition = (parentBounds, dropdownMaxHeight) => {\r\n    const dropdownBottom = parentBounds.bottom + dropdownMaxHeight;\r\n    return window.innerHeight > dropdownBottom\r\n        ? 'bottom'\r\n        : 'top';\r\n}\r\n\r\nconst filterOptions = (options, search, getOptionValue = (item) => item) => {\r\n    const regExpSafeSearch = search.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\r\n    const reg = new RegExp(regExpSafeSearch, 'i');\r\n    return options.filter(item => reg.test(getOptionValue(item)));\r\n}\r\n\r\nexport { getDropdownPosition, filterOptions };","import { useEffect, useState } from \"react\";\r\n\r\nimport { getDropdownPosition } from \"../utils\";\r\n\r\nconst useDropdownPosition = (parentBounds, dropdownMaxHeight) => {\r\n    const [dropdownPosition, setDropdownPosition] = useState();\r\n\r\n    useEffect(() => {\r\n        // при изменении позиции родительского элемента, определяем направление появления выпадающего списка\r\n        parentBounds && setDropdownPosition(getDropdownPosition(parentBounds, dropdownMaxHeight));\r\n    }, [parentBounds, dropdownMaxHeight])\r\n\r\n    return dropdownPosition;\r\n}\r\n\r\nexport default useDropdownPosition;","import { useCallback, useRef } from \"react\";\r\n\r\nconst useInput = () => {\r\n    const inputRef = useRef(null);\r\n\r\n    const focus = useCallback(() => {\r\n        if (inputRef && inputRef.current) {\r\n            inputRef.current.focus();\r\n        }\r\n    }, [])\r\n\r\n    const blur = useCallback(() => {\r\n        if (inputRef && inputRef.current) {\r\n            inputRef.current.blur();\r\n        }\r\n    }, [])\r\n\r\n    return { inputRef, focus, blur };\r\n}\r\n\r\nexport default useInput;","import { useCallback, useEffect, useState } from \"react\";\r\n\r\nconst useDropdown = ({ options, value, onOptionSelect, onCloseWithEscape, search }) => {\r\n    // State\r\n\r\n    const [isDropdownOpen, setIsDropdownOpen] = useState(false);\r\n    const [pointer, setPointer] = useState(null);\r\n\r\n\r\n    // Functions\r\n\r\n    const openDropdown = useCallback(() => {\r\n        if (pointer === null && options.length) {\r\n            setPointer(0);\r\n        }\r\n        setIsDropdownOpen(true);\r\n    }, [pointer, options])\r\n\r\n    const closeDropdown = useCallback(() => {\r\n        setIsDropdownOpen(false);\r\n        setPointer(null);\r\n    }, [])\r\n\r\n    const handleKeyDown = useCallback((event) => {\r\n        switch (event.key) {\r\n            case 'ArrowUp':\r\n                if (!isDropdownOpen) {\r\n                    setPointer(options.length - 1);\r\n                    openDropdown();\r\n                } else {\r\n                    if (!options.length) return;\r\n                    if (pointer - 1 < 0) {\r\n                        setPointer(options.length - 1);\r\n                    } else {\r\n                        setPointer(pointer - 1);\r\n                    }\r\n                }\r\n                break;\r\n            case 'ArrowDown':\r\n                if (!isDropdownOpen) {\r\n                    setPointer(0);\r\n                    openDropdown();\r\n                } else {\r\n                    if (!options.length) return;\r\n                    if (pointer + 1 >= options.length) {\r\n                        setPointer(0);\r\n                    } else {\r\n                        setPointer(pointer + 1);\r\n                    }\r\n                }\r\n                break;\r\n            case 'Enter':\r\n                if (pointer === null) return;\r\n\r\n                const option = options[pointer];\r\n                onOptionSelect(option);\r\n                break;\r\n            case 'Escape':\r\n                closeDropdown();\r\n                onCloseWithEscape();\r\n                break;\r\n            default:\r\n                if (!isDropdownOpen) {\r\n                    openDropdown();\r\n                }\r\n                break;\r\n        }\r\n    }, [closeDropdown, isDropdownOpen, openDropdown, onCloseWithEscape, onOptionSelect, pointer, options])\r\n\r\n    const toggle = useCallback(() => {\r\n        if (isDropdownOpen && search.length) return;\r\n\r\n        if (isDropdownOpen) {\r\n            closeDropdown()\r\n        } else {\r\n            openDropdown()\r\n        }\r\n    }, [closeDropdown, isDropdownOpen, openDropdown, search])\r\n\r\n\r\n    // Effects\r\n\r\n    useEffect(() => {\r\n        setPointer(options.length ? 0 : null);\r\n    }, [options])\r\n\r\n    useEffect(() => {\r\n        closeDropdown();\r\n    }, [value, closeDropdown])\r\n\r\n\r\n    return {\r\n        dropdown: {\r\n            isOpen: isDropdownOpen,\r\n            open: openDropdown,\r\n            close: closeDropdown,\r\n            toggle\r\n        },\r\n        pointer: {\r\n            position: pointer,\r\n            setPosition: setPointer\r\n        },\r\n        handleKeyDown\r\n    }\r\n}\r\n\r\nexport default useDropdown;","//import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Container = styled.div`\r\nposition: relative;\r\nmin-height: calc(1.5em + .75rem + 2px) !important;\r\nwidth: 100%;\r\nmargin: 0;\r\npadding-left: .375rem;\r\npadding-right: .375rem;\r\npadding-bottom: .375rem;\r\nbox-sizing: border-box;\r\ndisplay: flex;\r\nbackground-color: #fff;\r\nborder: 1px solid #ced4da;\r\nborder-radius: .25rem;\r\ncursor: pointer;\r\n${({ dropdownPosition, isDropdownOpen }) =>\r\n        isDropdownOpen &&\r\n        `border-${dropdownPosition}-right-radius: 0;\r\n         border-${dropdownPosition}-left-radius: 0;\r\n         border-${dropdownPosition}-color: #fff;`\r\n    }\r\n${({ disabled }) => disabled\r\n        ? `pointer-events: none;\r\n           background-color: #e9ecef;`\r\n        : ''\r\n    }\r\n\r\n&:focus-within {\r\n    box-shadow: 0 0 0 0.2rem rgb(38 143 255 / 50%);\r\n}\r\n`;\r\n\r\nexport default Container;","import React, { useEffect, useRef } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst OptionView = styled.span`\r\npadding: .375rem .75rem;\r\ndisplay: block;\r\nwhite-space: nowrap;\r\ncursor: pointer;\r\n\r\n${({ isPointerOver, isSelected }) => {\r\n        if (isPointerOver) {\r\n            return `\r\n            color: #fff;\r\n            background-color: #007bff;`\r\n        }\r\n\r\n        if (isSelected) {\r\n            return `\r\n            color: #212529;\r\n            background-color: #f2f2f2;`\r\n        }\r\n    }}\r\n`;\r\n\r\n\r\nconst Option = ({ isPointerOver, isSelected, children, ...props }) => {\r\n    const optionRef = useRef();\r\n\r\n    useEffect(() => {\r\n        if (isPointerOver && optionRef.current) {\r\n            optionRef.current.scrollIntoView({\r\n                behavior: 'smooth',\r\n                block: 'nearest',\r\n                inline: 'start'\r\n            });\r\n        }\r\n    }, [isPointerOver])\r\n\r\n    return (\r\n        <OptionView\r\n            ref={optionRef}\r\n            role='option'\r\n            aria-selected={isSelected}\r\n            title={typeof children === 'string' ? children : null}\r\n            isPointerOver={isPointerOver}\r\n            isSelected={isSelected}\r\n            {...props}\r\n        >\r\n            {children}\r\n        </OptionView>\r\n    );\r\n}\r\n\r\nexport default Option;\r\nexport { OptionView };","import React from 'react';\r\nimport { OptionView } from './option';\r\nimport styled from 'styled-components';\r\n\r\nconst NoResultsView = styled(OptionView)`\r\ncursor: default;\r\n`;\r\n\r\nconst NoResults = () => {\r\n    return (\r\n        <NoResultsView>\r\n            Совпадений не найдено\r\n        </NoResultsView>\r\n    );\r\n}\r\n\r\nexport default NoResults;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Option from './option';\r\nimport NoResults from './noResults';\r\n\r\n\r\nconst DropdownView = styled.div`\r\nposition: absolute;\r\nleft: -1px;\r\npadding: 0px;\r\nmax-height: ${({ maxHeight }) => maxHeight}px;\r\nwidth: ${({ parentBounds }) => parentBounds.width}px;\r\ndisplay: flex;\r\nflex-direction: column;\r\noverflow-x: hidden;\r\nborder-radius: 0;\r\nbackground-color: white;\r\nborder: 1px solid #ced4da;\r\nbox-sizing: border-box;\r\nz-index: 19;\r\n${({ parentBounds, dropdownPosition }) =>\r\n        dropdownPosition === 'top'\r\n            ? `bottom: ${parentBounds.height}px;\r\n               border-bottom: none;\r\n               border-top-right-radius: .25rem;\r\n               border-top-left-radius: .25rem;`\r\n            : `top: ${parentBounds.height - 1}px;\r\n               border-top: none;\r\n               border-bottom-right-radius: .25rem;\r\n               border-bottom-left-radius: .25rem;`\r\n    }\r\n`;\r\n\r\n\r\nconst Dropdown = ({\r\n    options,\r\n    content,\r\n    getOptionKey = (option) => option,\r\n    renderOptionText = (option) => option,\r\n    onSelectOption,\r\n    selectedItems,\r\n    pointer,\r\n    onUpdatePointer,\r\n    parentBounds,\r\n    maxHeight,\r\n    position\r\n}) => {\r\n    return (\r\n        <DropdownView\r\n            dropdownPosition={position}\r\n            maxHeight={maxHeight}\r\n            parentBounds={parentBounds}\r\n        >\r\n            {\r\n                content\r\n                    ? content\r\n                    :\r\n                    options.length\r\n                        ? options.map((option, index) => {\r\n                            const key = getOptionKey(option);\r\n                            const isPointerOver = index === pointer;\r\n                            const isSelected = !!(selectedItems && selectedItems.find(item => getOptionKey(item) === key));\r\n                            const onClick = (event) => {\r\n                                event.stopPropagation();\r\n                                onSelectOption(option);\r\n                            }\r\n\r\n                            return (\r\n                                <Option key={key}\r\n                                    isPointerOver={isPointerOver}\r\n                                    isSelected={isSelected}\r\n                                    onMouseEnter={() => onUpdatePointer(index)}\r\n                                    onClick={onClick}\r\n                                >\r\n                                    {renderOptionText(option)}\r\n                                </Option>\r\n                            )\r\n                        })\r\n                        : <NoResults />\r\n            }\r\n        </DropdownView>\r\n    );\r\n}\r\n\r\nexport default Dropdown;","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst InputView = styled.input`\r\nflex-grow: 1;\r\nmargin-top: calc(.375rem - 2px);\r\npadding: 0;\r\nbox-sizing: border-box;\r\nborder: none;\r\nfont-family: inherit;\r\nfont-size: inherit;\r\nbackground-color: inherit;\r\nline-height: inherit;\r\ncolor: #495057;\r\n\r\n&:focus {\r\n    outline: 0;\r\n}\r\n`;\r\n\r\nconst Input = ({ inputRef, placeholder, value, onSearchChange, disabled }) => {\r\n    const onChange = (event) => onSearchChange(event.target.value);\r\n\r\n    return (\r\n        <InputView\r\n            ref={inputRef}\r\n            placeholder={placeholder}\r\n            value={value}\r\n            onChange={onChange}\r\n            disabled={disabled}\r\n        />\r\n    );\r\n}\r\n\r\nexport default Input;","import React from 'react';\r\nimport styled from \"styled-components\";\r\n\r\nconst ClearView = styled.span`\r\npadding-right: 3px;\r\npadding-left: 3px;\r\nfont-weight: 700;\r\nfont-size: 1.25rem;\r\ncolor: #bdc6d0;\r\nalign-self: center;\r\n\r\n&:hover {\r\n    color: #343a40;\r\n}\r\n`;\r\n\r\nconst Clear = ({ onClick }) => {\r\n    return (\r\n        <ClearView onClick={onClick} title=\"Очистить\">\r\n            &times;\r\n        </ClearView>\r\n    );\r\n}\r\n\r\nexport default Clear;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Clear from '../clear';\r\n\r\nconst AutoCompleteContentView = styled.div`\r\ndisplay: flex;\r\nflex: 1;\r\nalign-items: flex-end;\r\n`\r\n\r\nconst ValueView = styled.span`\r\nflex: 1;\r\ncolor: #495057;\r\n`\r\n\r\nconst Content = ({ value, renderValueText, input, onClear }) => {\r\n    return (\r\n        <AutoCompleteContentView>\r\n            {\r\n                value\r\n                    ? <>\r\n                        <ValueView>\r\n                            {renderValueText(value)}\r\n                        </ValueView>\r\n                        <Clear onClick={onClear} />\r\n                    </>\r\n                    : input\r\n            }\r\n        </AutoCompleteContentView>\r\n    );\r\n}\r\n\r\nexport default Content;","import React from 'react';\r\nimport { OptionView } from '../option';\r\nimport styled from 'styled-components';\r\n\r\nconst ThresholdView = styled(OptionView)`\r\ncursor: default;\r\n`;\r\n\r\nconst Threshold = () => {\r\n    return (\r\n        <ThresholdView>\r\n            Продолжайте ввод, чтобы начался поиск\r\n        </ThresholdView>\r\n    );\r\n}\r\n\r\nexport default Threshold;","import React from 'react';\r\nimport { OptionView } from '../option';\r\nimport styled from 'styled-components';\r\n\r\nconst LoadingView = styled(OptionView)`\r\ncursor: default;\r\ntext-align: center;\r\n`;\r\n\r\nconst Spinner = styled.span`\r\n@keyframes spinner-border {\r\n  to { transform: rotate(360deg); }\r\n}\r\ndisplay: inline-block;\r\nwidth: 1rem;\r\nheight: 1rem;\r\nvertical-align: text-bottom;\r\nborder: .25em solid currentColor;\r\nborder-right-color: transparent;\r\nborder-radius: 50%;\r\nborder-width: .2em;\r\nanimation: spinner-border .75s linear infinite;\r\ncolor: #6c757d!important;\r\n`;\r\n\r\nconst Loading = () => {\r\n    return (\r\n        <LoadingView>\r\n            <Spinner />\r\n        </LoadingView>\r\n    );\r\n}\r\n\r\nexport default Loading;","import React, { useState, useCallback } from 'react';\r\n\r\nimport useElementBounds from '../../hooks/useElementBounds';\r\nimport useOuterClick from '../../hooks/useOuterClick';\r\nimport useDropdownPosition from '../../hooks/useDropdownPosition'\r\nimport useInput from '../../hooks/useInput';\r\nimport useDropdown from '../../hooks/useDropdown';\r\nimport Container from '../container';\r\nimport Dropdown from '../dropdown';\r\nimport Input from '../input';\r\nimport Content from './content';\r\nimport Threshold from './threshold';\r\nimport Loading from './loading';\r\n\r\n\r\nconst Autocomplete = ({\r\n    options,\r\n    value,\r\n    onChange,\r\n    onSearchChange,\r\n    threshold = 3,\r\n    isLoading = false,\r\n    getOptionKey = (option) => option.id ?? option,\r\n    renderOptionText = (option) => option,\r\n    renderValueText = (option) => renderOptionText(option),\r\n    dropdownHeight = 300,\r\n    placeholder = 'Начните ввод для поиска',\r\n    disabled = false,\r\n    ...props\r\n}) => {\r\n    const [search, setSearch] = useState('');\r\n    const { inputRef, focus, blur } = useInput();\r\n\r\n    const thresholdContent = search.length <= threshold ? <Threshold /> : null;\r\n    const loadingContent = isLoading ? <Loading /> : null;\r\n\r\n    const updateSearch = useCallback((value) => {\r\n        setSearch(value);\r\n        onSearchChange(value);\r\n    }, [onSearchChange])\r\n\r\n    const { dropdown, pointer, handleKeyDown } = useDropdown({\r\n        onCloseWithEscape: blur,\r\n        onOptionSelect: onChange,\r\n        options: options,\r\n        search,\r\n        value\r\n    });\r\n\r\n    const onOuterClick = useCallback(() => {\r\n        dropdown.close();\r\n        blur();\r\n    }, [dropdown, blur])\r\n\r\n    const onClick = useCallback(() => {\r\n        if (options.length && search.length > threshold) {\r\n            dropdown.toggle();\r\n        }\r\n        focus();\r\n    }, [focus, dropdown, options, search, threshold])\r\n\r\n    const handleClear = useCallback(() => {\r\n        updateSearch('');\r\n        onChange(null);\r\n    }, [updateSearch, onChange])\r\n\r\n\r\n    const innerRef = useOuterClick(onOuterClick);\r\n    const controlBounds = useElementBounds(innerRef);\r\n    const dropdownPosition = useDropdownPosition(controlBounds, dropdownHeight);\r\n\r\n\r\n    const SearchInput = <Input\r\n        inputRef={inputRef}\r\n        placeholder={value ? null : placeholder}\r\n        value={search}\r\n        onSearchChange={updateSearch}\r\n        disabled={disabled}\r\n    />\r\n\r\n    return (\r\n        <Container\r\n            ref={innerRef}\r\n            dropdownPosition={dropdownPosition}\r\n            isDropdownOpen={dropdown.isOpen}\r\n            onKeyDown={handleKeyDown}\r\n            onClick={onClick}\r\n            disabled={disabled}\r\n            {...props}\r\n        >\r\n            <Content\r\n                value={value}\r\n                renderValueText={renderValueText}\r\n                input={SearchInput}\r\n                onClear={handleClear}\r\n            />\r\n            {\r\n                dropdown.isOpen && !disabled\r\n                    ? <Dropdown\r\n                        content={thresholdContent || loadingContent || null}\r\n                        options={options}\r\n                        getOptionKey={getOptionKey}\r\n                        renderOptionText={renderOptionText}\r\n                        onSelectOption={onChange}\r\n                        pointer={pointer.position}\r\n                        onUpdatePointer={pointer.setPosition}\r\n                        parentBounds={controlBounds}\r\n                        maxHeight={300}\r\n                        position={dropdownPosition}\r\n                    />\r\n                    : null\r\n            }\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Autocomplete;","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst SelectedItemView = styled.div`\r\ndisplay: flex;\r\nalign-items: center;\r\npadding: 0;\r\npadding-right: .75rem;\r\nmargin-top: calc(.375rem - 2px);\r\nmargin-right: .375rem;\r\ncolor: #495057;\r\nfont-size: 1rem;\r\ncursor: pointer;\r\nborder: 1px solid #bdc6d0;\r\nborder-radius: .2rem;\r\n`;\r\n\r\nconst RemoveItem = styled.span`\r\npadding-right: 3px;\r\npadding-left: 3px;\r\nmargin-right: 1px;\r\nmargin-left: 3px;\r\nfont-weight: 700;\r\ncolor: #bdc6d0;\r\n\r\n&:hover {\r\n    color: #343a40;\r\n}\r\n`;\r\n\r\nconst SelectedItem = ({ onItemRemove, children }) => {\r\n    const onClick = (event) => {\r\n        event.stopPropagation();\r\n        onItemRemove();\r\n    }\r\n\r\n    return (\r\n        <SelectedItemView>\r\n            <RemoveItem onClick={onClick}>\r\n                &times;\r\n            </RemoveItem>\r\n            {children}\r\n        </SelectedItemView>\r\n    );\r\n}\r\n\r\nexport default SelectedItem;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport SelectedItem from './selectedItem';\r\n\r\nconst MultiselectContentView = styled.div`\r\ndisplay: flex;\r\nflex-wrap: wrap;\r\nflex: 1;\r\n`;\r\n\r\nconst MultiselectContent = ({ selected, getOptionKey, renderValueText, onItemRemove, input }) => {\r\n    return (\r\n        <MultiselectContentView>\r\n            {\r\n                selected.map((option) => {\r\n                    const handleRemoveItem = () => onItemRemove(option);\r\n\r\n                    return (\r\n                        <SelectedItem key={getOptionKey(option)} onItemRemove={handleRemoveItem}>\r\n                            {renderValueText(option)}\r\n                        </SelectedItem>\r\n                    )\r\n                })\r\n            }\r\n            {input}\r\n        </MultiselectContentView>\r\n    );\r\n}\r\n\r\nexport default MultiselectContent;","import React, { useState, useCallback } from 'react';\r\n\r\nimport useElementBounds from '../../hooks/useElementBounds';\r\nimport useOuterClick from '../../hooks/useOuterClick';\r\nimport useDropdownPosition from '../../hooks/useDropdownPosition'\r\nimport useInput from '../../hooks/useInput';\r\nimport useDropdown from '../../hooks/useDropdown';\r\nimport Container from '../container';\r\nimport Content from './content';\r\nimport Dropdown from '../dropdown';\r\nimport Input from '../input';\r\nimport { filterOptions } from '../../utils';\r\n\r\n\r\nconst Multiselect = ({\r\n    options = [],\r\n    value = [], // состояние выбранных элементов должно управляться родительским компонентом\r\n    onChange,\r\n    getOptionKey = (option) => option.id ?? option,\r\n    renderOptionText = (option) => option,\r\n    renderValueText = (option) => renderOptionText(option),\r\n    dropdownHeight = 300,\r\n    placeholder = 'Начните ввод для поиска',\r\n    disabled = false,\r\n    getSearchValue = (option) => renderOptionText(option),\r\n    ...props\r\n}) => {\r\n    const [search, setSearch] = useState('');\r\n    const [searchResults, setSearchResults] = useState(options);\r\n\r\n    const { inputRef, focus, blur } = useInput();\r\n\r\n    const updateSearch = useCallback((value) => {\r\n        setSearch(value);\r\n        const newSearchResults = value === ''\r\n            ? options\r\n            : filterOptions(options, value, getSearchValue);\r\n        setSearchResults(newSearchResults);\r\n    }, [options, getSearchValue])\r\n\r\n    const handleChange = useCallback((newValue) => {\r\n        onChange(newValue);\r\n        updateSearch('');\r\n        focus();\r\n    }, [focus, onChange, updateSearch])\r\n\r\n    const handleOptionSelect = useCallback((option) => {\r\n        const selectedOptionIndex = value.findIndex(item => getOptionKey(item) === getOptionKey(option))\r\n        let newValue;\r\n\r\n        if (selectedOptionIndex !== -1) {\r\n            // если выбираемая опция уже была выбрана ранее, исключаем ее из выбора\r\n            newValue = [\r\n                ...value.slice(0, selectedOptionIndex),\r\n                ...value.slice(selectedOptionIndex + 1)\r\n            ]\r\n        } else {\r\n            newValue = [...value, option];\r\n        }\r\n        handleChange(newValue);\r\n    }, [value, getOptionKey, handleChange])\r\n\r\n    const handleItemSelectionRemove = useCallback((item) => {\r\n        const newValue = value.filter(selected => getOptionKey(selected) !== getOptionKey(item));\r\n        handleChange(newValue);\r\n    }, [value, getOptionKey, handleChange])\r\n\r\n    const { dropdown, pointer, handleKeyDown } = useDropdown({\r\n        onCloseWithEscape: blur,\r\n        onOptionSelect: handleOptionSelect,\r\n        options: searchResults,\r\n        search,\r\n        value\r\n    });\r\n\r\n    const onOuterClick = useCallback(() => {\r\n        dropdown.close();\r\n        blur();\r\n        updateSearch('');\r\n    }, [dropdown, blur, updateSearch])\r\n\r\n    const onClick = useCallback(() => {\r\n        dropdown.toggle();\r\n        focus();\r\n    }, [dropdown, focus])\r\n\r\n\r\n    const innerRef = useOuterClick(onOuterClick);\r\n    const selectBounds = useElementBounds(innerRef);\r\n    const dropdownPosition = useDropdownPosition(selectBounds, dropdownHeight);\r\n\r\n\r\n    const SearchInput = <Input\r\n        inputRef={inputRef}\r\n        placeholder={value.length ? null : placeholder}\r\n        value={search}\r\n        onSearchChange={updateSearch}\r\n        disabled={disabled}\r\n    />\r\n\r\n    return (\r\n        <Container\r\n            ref={innerRef}\r\n            dropdownPosition={dropdownPosition}\r\n            isDropdownOpen={dropdown.isOpen}\r\n            onKeyDown={handleKeyDown}\r\n            onClick={onClick}\r\n            disabled={disabled}\r\n            {...props}\r\n        >\r\n            <Content\r\n                selected={value}\r\n                getOptionKey={getOptionKey}\r\n                renderValueText={renderValueText}\r\n                onItemRemove={handleItemSelectionRemove}\r\n                input={SearchInput}\r\n            />\r\n            {\r\n                dropdown.isOpen && !disabled\r\n                    ? <Dropdown\r\n                        options={searchResults}\r\n                        getOptionKey={getOptionKey}\r\n                        renderOptionText={renderOptionText}\r\n                        onSelectOption={handleOptionSelect}\r\n                        pointer={pointer.position}\r\n                        onUpdatePointer={pointer.setPosition}\r\n                        selectedItems={value}\r\n                        parentBounds={selectBounds}\r\n                        maxHeight={300}\r\n                        position={dropdownPosition}\r\n                    />\r\n                    : null\r\n            }\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Multiselect;","const selectedOption = {\r\n    id: \"6102f571e997d10c5815883f\",\r\n    name: \"Mckay Frye\",\r\n    email: \"mckayfrye@google.com\"\r\n};\r\n\r\nconst options = [\r\n    { ...selectedOption },\r\n    {\r\n        id: \"6102f571926af4d952c415d3\",\r\n        name: \"Elinor Fisher\",\r\n        email: \"elinorfisher@google.com\"\r\n    },\r\n    {\r\n        id: \"6102f5718cad5a01e82643be\",\r\n        name: \"Ball Clements\",\r\n        email: \"ballclements@google.com\"\r\n    },\r\n    {\r\n        id: \"6102f571bcdec51c437ca10b\",\r\n        name: \"Bessie Brown\",\r\n        email: \"bessiebrown@google.com\"\r\n    },\r\n    {\r\n        id: \"6102f571b1511cc6e5c85cdc\",\r\n        name: \"Gwendolyn Levine\",\r\n        email: \"gwendolynlevine@google.com\"\r\n    },\r\n    {\r\n        id: \"6102f571091863e8bc0b4837\",\r\n        name: \"Kristin Fisher\",\r\n        email: \"kristinfisher@google.com\"\r\n    },\r\n    {\r\n        id: \"6102f57186ba246fa97fac0b\",\r\n        name: \"Jenna Walter\",\r\n        email: \"jennawalter@google.com\"\r\n    },\r\n    {\r\n        id: \"6102f571375d59ef764ff9cf\",\r\n        name: \"Mcbride Velasquez\",\r\n        email: \"mcbridevelasquez@google.com\"\r\n    },\r\n    {\r\n        id: \"6102f571683ae4c61fd3799d\",\r\n        name: \"Mccormick Cooke\",\r\n        email: \"mccormickcooke@google.com\"\r\n    },\r\n    {\r\n        id: \"6102f5711196471b7f008eea\",\r\n        name: \"Richmond Sloan\",\r\n        email: \"richmondsloan@google.com\"\r\n    },\r\n    {\r\n        id: \"6102f57191f0bec27180f87f\",\r\n        name: \"Huff Fisher\",\r\n        email: \"hufffisher@google.com\"\r\n    },\r\n    {\r\n        id: \"6102f571386a2811cddd43bf\",\r\n        name: \"Collins Beasley\",\r\n        email: \"collinsbeasley@google.com\"\r\n    },\r\n    {\r\n        id: \"6102f571f341055c670b9c4c\",\r\n        name: \"Britt Lloyd\",\r\n        email: \"brittlloyd@google.com\"\r\n    },\r\n    {\r\n        id: \"6102f5712abd397431f69836\",\r\n        name: \"Daphne Dalton\",\r\n        email: \"daphnedalton@google.com\"\r\n    },\r\n    {\r\n        id: \"6102f5710677f42b86a69031\",\r\n        name: \"Audra Townsend\",\r\n        email: \"audratownsend@google.com\"\r\n    }\r\n]\r\n\r\nexport { selectedOption, options };","import React, { useEffect, useState } from 'react';\r\n\r\nimport { Autocomplete, Multiselect } from './lib/components';\r\nimport { filterOptions } from './lib/utils';\r\nimport { selectedOption, options } from './mockData'\r\n\r\n\r\nconst autocompleteThreshold = 3;\r\n\r\nconst App = () => {\r\n  const [selected, setSelected] = useState([selectedOption]);\r\n\r\n  const [autocompleteOptions, setAutocompleteOptions] = useState([]);\r\n  const [autocompleteValue, setAutocompleteValue] = useState(null);\r\n  const [autocompleteSearch, setAutocompleteSearch] = useState(null);\r\n  const [autocompleteLoading, setAutocompleteLoading] = useState(false);\r\n\r\n  const getSearchValue = (option) => option.name;\r\n  const getOptionKey = (option) => option.id;\r\n  const renderOptionText = (option) => {\r\n    return (\r\n      <span>\r\n        <b>{option.name}</b> <br />\r\n        {option.email}\r\n      </span>\r\n    )\r\n  };\r\n  const renderValueText = (option) => option.name;\r\n\r\n  useEffect(() => {\r\n    if (autocompleteSearch === null) return;\r\n    if (autocompleteSearch.length <= autocompleteThreshold) return;\r\n\r\n    setAutocompleteLoading(true);\r\n    // здесь может быть обращение к api\r\n    const timer = setTimeout(() => {\r\n      const newOptions = filterOptions(options, autocompleteSearch, getSearchValue);\r\n      setAutocompleteOptions(newOptions);\r\n      setAutocompleteLoading(false);\r\n    }, 500)\r\n\r\n    return () => clearTimeout(timer);\r\n  }, [autocompleteSearch])\r\n\r\n\r\n  return (\r\n    <div style={{ width: '600px', margin: '50px auto' }}>\r\n      <h1>React dropdown components</h1>\r\n      <div>\r\n        <h2>Multiselect</h2>\r\n        <Multiselect\r\n          value={selected}\r\n          options={options}\r\n          onChange={setSelected}\r\n          getOptionKey={getOptionKey}\r\n          renderOptionText={renderOptionText}\r\n          renderValueText={renderValueText}\r\n          getSearchValue={getSearchValue}\r\n          placeholder='Type to search'\r\n        />\r\n      </div>\r\n      <div>\r\n        <h2>Autocomplete</h2>\r\n        <Autocomplete\r\n          options={autocompleteOptions}\r\n          value={autocompleteValue}\r\n          onChange={setAutocompleteValue}\r\n          onSearchChange={setAutocompleteSearch}\r\n          isLoading={autocompleteLoading}\r\n          threshold={autocompleteThreshold}\r\n          getOptionKey={getOptionKey}\r\n          renderOptionText={renderOptionText}\r\n          placeholder='Type \"fish\"'\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}